with(Domains):

gcdUFD:=proc(K,f,g)

local r, n, coef, i, normalized;

r[0] := K[Primpart](f);
r[1] := K[Primpart](g);
n[0] := K[Degree](f);
n[1] := K[Degree](g);

i := 1;
while r[i] <> K[Input](0) do
    coef := K[`^`](K[Lcoeff](r[i]), n[i - 1] - n[i] + 1);
    r[i + 1] := K[Primpart](K[Rem](K[`*`](coef, r[i - 1]), r[i]));
    n[i + 1] := K[Degree](r[i + 1]);
    i := i + 1;
od:

normalized := K[Normal](K[`*`](-1, r[i - 1]));

return(normalized)
end: 

#EXAMPLES:

Qx := DUP(Q, x):
f := Qx[Input](x^5 + 2*x^3 + x);
g := Qx[Input](x^4 - 1);
gcdUFD(Qx, f, g); #Result: x^2 + 1

Qx := DUP(Q, x):
f := Qx[Input](18*x^3 - 42*x^2 + 30*x - 6);
g := Qx[Input](-12*x^2 + 10*x - 2);
gcdUFD(Qx, f, g); #Result: -1/3 + x

Qx := DUP(Q, x):
f := Qx[Input](x^8 + 2*x^7 + 4*x^6 - 2*x^5 - 3*x^4 + 4*x^3 + 9*x^2 - 2*x - 5);
g := Qx[Input](5*x^5 - 2*x^4 - 13*x^3 - 11*x^2 + 7*x + 6);
gcdUFD(Qx, f, g); #Result: x^3 + x^2 - 1
